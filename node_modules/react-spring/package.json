{
  "_from": "react-spring@^4.1.8",
  "_id": "react-spring@4.2.0",
  "_inBundle": false,
  "_integrity": "sha512-OXyPgbZljWqjFj3KLQkO3Py6muyMMTkQglL4XP7F60fve0BZIFJN4GA15ssE/c0hy8BzN62yMVnwszetpj+Ayw==",
  "_location": "/react-spring",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "react-spring",
    "fetchSpec": "^4.1.8",
    "name": "react-spring",
    "raw": "react-spring@^4.1.8",
    "rawSpec": "^4.1.8",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-spring/-/react-spring-4.2.0.tgz",
  "_shasum": "d28c4448372646e9bfb968103a448b6913b0f4cd",
  "_shrinkwrap": null,
  "_spec": "react-spring@^4.1.8",
  "_where": "/home/tomasroaldsnes/Code/lovers-for-life",
  "author": {
    "name": "Paul Henschel"
  },
  "bugs": {
    "url": "https://github.com/drcmda/react-spring/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "@babel/runtime": "^7.0.0-beta.44",
    "create-react-context": "^0.2.2"
  },
  "deprecated": false,
  "description": "Animate React with ease",
  "devDependencies": {
    "@babel/core": "7.0.0-beta.44",
    "@babel/plugin-transform-runtime": "^7.0.0-beta.44",
    "@babel/preset-env": "7.0.0-beta.44",
    "@babel/preset-react": "7.0.0-beta.44",
    "@babel/preset-stage-2": "7.0.0-beta.44",
    "babel-core": "7.0.0-bridge.0",
    "babel-jest": "22.4.0",
    "babel-plugin-transform-react-remove-prop-types": "0.4.13",
    "husky": "^0.14.3",
    "lint-staged": "^7.0.4",
    "prettier": "^1.12.0",
    "react": "16.2.0",
    "react-dom": "16.2.0",
    "rimraf": "2.6.2",
    "rollup": "0.56.5",
    "rollup-plugin-babel": "^4.0.0-beta.4",
    "rollup-plugin-commonjs": "^9.0.0",
    "rollup-plugin-node-resolve": "^3.2.0",
    "rollup-plugin-size-snapshot": "^0.3.1",
    "rollup-plugin-uglify": "^3.0.0"
  },
  "files": [
    "API.md",
    "dist",
    "index.d.ts",
    "src"
  ],
  "homepage": "https://github.com/drcmda/react-spring#readme",
  "keywords": [
    "animated",
    "animation",
    "motion",
    "react",
    "spring"
  ],
  "license": "ISC",
  "lint-staged": {
    "*.{js,md}": [
      "git add",
      "prettier --write"
    ]
  },
  "main": "dist/react-spring.cjs.js",
  "module": "dist/react-spring.es.js",
  "name": "react-spring",
  "optionalDependencies": {},
  "peerDependencies": {
    "prop-types": "15.x.x",
    "react": ">= 16.0.0",
    "react-dom": ">= 16.0.0"
  },
  "prettier": {
    "jsxBracketSameLine": true,
    "printWidth": 80,
    "semi": false,
    "singleQuote": true,
    "tabWidth": 2,
    "trailingComma": "es5"
  },
  "readme": "[![Build Status](https://travis-ci.org/drcmda/react-spring.svg?branch=master)](https://travis-ci.org/drcmda/react-spring) [![npm version](https://badge.fury.io/js/react-spring.svg)](https://badge.fury.io/js/react-spring)\n\n# Installation üñ•\n\n    npm install react-spring\n\n# Table of Contents üëá\n\n* [What is it?](#what-is-it-)\n* [Why do we need yet another?](#why-do-we-need-yet-another-)\n* [Overview](#overview-)\n* [Render props, interpolation and native rendering](#render-props-interpolation-and-native-rendering-)\n* [Links](#links-)\n\n# What is it? ü§î\n\n<p align=\"middle\">\n  <img src=\"assets/spring.gif\" width=\"285\" />\n  <img src=\"assets/transitions.gif\" width=\"285\" />\n  <img src=\"assets/trails.gif\" width=\"285\" />\n</p>\n<p align=\"middle\">\n  <img src=\"assets/tree.gif\" width=\"285\" />\n  <img src=\"assets/sunburst.gif\" width=\"285\" />\n  <img src=\"assets/areas.gif\" width=\"285\" />\n</p>\n<p align=\"middle\">\n  <img src=\"assets/gestures.gif\" width=\"285\" />\n  <img src=\"assets/reveals.gif\" width=\"285\" />\n  <img src=\"assets/morph.gif\" width=\"285\" />\n</p>\n<p align=\"middle\">\n  <img src=\"assets/vertical.gif\" width=\"285\" />\n  <img src=\"assets/horizontal.gif\" width=\"285\" />\n  <img src=\"assets/keyframes-trail.gif\" width=\"285\" />\n</p>\n<p align=\"middle\">\n  <img src=\"assets/dragndrop.gif\" width=\"285\" />\n  <img src=\"assets/stream.gif\" width=\"285\" />\n  <img src=\"assets/time.gif\" width=\"285\" />\n</p>\n\nA set of simple, spring-physics based primitives (as in building blocks) that should cover most of your UI related animation needs once plain CSS can't cope any longer. Forget easings, durations, timeouts and so on as you fluidly move data from one state to another. This isn't meant to solve each and every problem but rather to give you tools flexible enough to confidently cast ideas into moving interfaces.\n\n# Why do we need yet another? üßê\n\nreact-spring is a cooked down fork of Christopher Chedeau's [animated](https://github.com/animatedjs/animated) (which is used in react-native by default). It is trying to bridge it with Cheng Lou's [react-motion](https://github.com/chenglou/react-motion). Although both are similarily spring-physics based they are still polar opposites.\n\n|                | Declarative | Primitives | Interpolations | Performance |\n| -------------- | ----------- | ---------- | -------------- | ----------- |\n| React-motion ¬† | ‚úÖ          | ‚úÖ         | ‚ùå             | ‚ùå          |\n| Animated ¬† ¬† ¬† | ‚ùå          | ‚ùå         | ‚úÖ             | ‚úÖ          |\n| React-spring ¬† | ‚úÖ          | ‚úÖ         | ‚úÖ             | ‚úÖ          |\n\nreact-spring builds upon animated's foundation, casting its imperative side out, making it leaner and more flexible. It inherits react-motions declarative api and goes to great lengths to simplify it. It has lots of useful primitives, can interpolate mostly everything and last but not least, can animate by committing directly to the dom instead of re-rendering a component frame-by-frame.\n\nFor a more detailed explanation read [Why React needed yet another animation library](https://medium.com/@drcmda/why-react-needed-yet-another-animation-library-introducing-react-spring-8212e424c5ce).\n\n# Overview üî≠\n\n#### Springs ([Demo](https://codesandbox.io/embed/oln44nx8xq))\n\n<img src=\"assets/spring.gif\" width=\"285\" />\n\nA `Spring` will move data from one state to another. It remembers the current state, value changes are always fluid.\n\n```jsx\nimport { Spring } from 'react-spring'\n\n<Spring from={{ opacity: 0 }} to={{ opacity: 1 }}>\n    {styles => <div style={styles}>i will fade in</div>}\n</Spring>\n```\n\n#### Mount/unmount Transitions ([Demo](https://codesandbox.io/embed/j150ykxrv))\n\n<img src=\"assets/transitions.gif\" width=\"285\" />\n\n`Transition` watches elements as they mount and unmount, it helps you to animate these changes.\n\n```jsx\nimport { Transition } from 'react-spring'\n\n<Transition\n    keys={items.map(item => item.key)}\n    from={{ opacity: 0, height: 0 }}\n    enter={{ opacity: 1, height: 20 }}\n    leave={{ opacity: 0, height: 0 }}>\n    {items.map(item => styles => <li style={styles}>{item.text}</li>)}\n</Transition>\n```\n\n#### 2-state Reveals ([Demo](https://codesandbox.io/embed/yj52v5689))\n\n<img src=\"assets/reveals.gif\" width=\"285\" />\n\nGiven a single child instead of a list you can reveal components with it.\n\n```jsx\nimport { Transition } from 'react-spring'\n\n<Transition from={{ opacity: 0 }} enter={{ opacity: 1 }} leave={{ opacity: 0 }}>\n    {toggle ? ComponentA : ComponentB}\n</Transition>\n```\n\n#### Trails and staggered animations ([Demo](https://codesandbox.io/embed/vvmv6x01l5))\n\n<img src=\"assets/trails.gif\" width=\"285\" />\n\n`Trail` animates the first child of a list of elements, the rest follow the spring of their previous sibling.\n\n```jsx\nimport { Trail } from 'react-spring'\n\n<Trail from={{ opacity: 0 }} to={{ opacity: 1 }} keys={items.map(item => item.key)}>\n    {items.map(item => styles => <div style={styles}>{item.text}</div>)}\n</Trail>\n```\n\n#### Parallax and page transitions ([Demo](https://codesandbox.io/embed/548lqnmk6l))\n\n<img src=\"assets/horizontal.gif\" width=\"285\" />\n\n`Parallax` allows you to declaratively create page/scroll-based animations.\n\n```jsx\nimport { Parallax, ParallaxLayer } from 'react-spring'\n\n<Parallax pages={2}>\n    <ParallaxLayer offset={0} speed={0.2}>\n        first Page\n    </ParallaxLayer>\n    <ParallaxLayer offset={1} speed={0.5}>\n        second Page\n    </ParallaxLayer>\n</Parallax>\n```\n\n#### Time/duration-based implementations and addons ([Demo](https://codesandbox.io/embed/q9lozyymr9))\n\n<img src=\"assets/time.gif\" width=\"285\" />\n\nYou'll find varying implementations under [/dist/addons](https://github.com/drcmda/react-spring/tree/master/src/addons). For now there's a time-based animation as well common [easings](https://github.com/drcmda/react-spring/blob/master/src/addons/Easing.js), and IOS'es harmonic oscillator spring. All primitives understand the `impl` property which you can use to switch implementations.\n\n```jsx\nimport { TimingAnimation, Easing } from 'react-spring/dist/addons'\n\n<Spring impl={TimingAnimation} config={{ delay: 200, duration: 1000, easing: Easing.linear }} ...>\n```\n\n#### Keyframes ([Demo](https://codesandbox.io/embed/zl35mrkqmm))\n\n<img src=\"assets/keyframes-trail.gif\" width=\"285\" />\n\n`Keyframes` orchestrates animations in a script that you provide. Theoretically you can even switch between primitives, for instance going from a Spring, to a Trail, to a Transition. It tries its best to remember the last state so that animations are additive. Animation can be awaited and return current props. Be warned: the keyframe API is still highly experiemental and can be subject to changes.\n\n```jsx\nimport { Keyframes, Spring } from 'react-spring'\n\n<Keyframes script={async next => {\n    await next(Spring, { from: { opacity: 0 }, to: { opacity: 1 } })\n    await next(Spring, { to: { opacity: 0 } })\n}}>\n    {styles => <div style={styles}>Hello</div>}\n</Keyframes>\n```\n\n# Render props, interpolation and native rendering üöÄ\n\n### Render props\n\nThe Api is driven by render props ([though we do expose imperative Api as well](https://github.com/drcmda/react-spring/blob/master/API-OVERVIEW.md#imperative-api)). By principle we offer both `render` and `children` as well as prop forwardwing (unrecognized props will be spread over the receiving component).\n\n```jsx\nconst Header = ({ children, bold, ...styles }) => (\n    <h1 style={styles}>\n        {bold ? <b>{children}</b> : children}\n    </h1>\n)\n\n<Spring render={Header} to={{ color: 'fuchsia' }} bold={this.state.bold}>\n    hello there\n</Spring>\n```\n\n### Interpolation\n\nYou can interpolate almost everything, from numbers, colors (names, rgb, rgba, hsl, hsla), paths (as long as the number of points match, otherwise use [custom interpolation](https://codesandbox.io/embed/lwpkp46om)), percentages, units, arrays and string patterns:\n\n```jsx\n<Spring to={{\n    scale: toggle ? 1 : 2,\n    start: toggle ? '#abc' : 'rgb(10,20,30)',\n    end: toggle ? 'seagreen' : 'rgba(0,0,0,0.5)',\n    stop: toggle ? '0%' : '50%',\n    rotate: toggle ? '0deg' : '45deg',\n    shadow: toggle ? '0 2px 2px 0px rgba(0, 0, 0, 0.12)' : '0 20px 20px 0px rgba(0, 0, 0, 0.5)',\n    path: toggle ? 'M20,380 L380,380 L380,380 Z' : 'M20,20 L20,380 L380,380 Z',\n    vector: toggle ? [1,2,50,100] : [20,30,1,-100],\n}}>\n```\n\n### Native rendering\n\n| ![img](assets/without-native.jpeg)                                                                                                                                                                                        | ![img](assets/with-native.jpeg)                                                                                                                                                                                         |\n| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| <sub>Libraries animate by having React recalculate the component-tree on every frame. Here it attempts to animate a component consisting of ~300 sub-components, plowing through the frame budget and causing jank.</sub> | <sub>React-spring with the `native` property renders the component _only once_, from then on the animation will be applied directly to the dom in a requestAnimationFrame-loop, similar to how gsap and d3 do it.</sub> |\n\n```jsx\nimport { Spring, animated } from 'react-spring'\n\n<Spring native from={{ opacity: 0 }} to={{ opacity: 1 }}>\n    {styles => <animated.div style={styles}>i will fade in</animated.div>}\n</Spring>\n```\n\nMore about native rendering and interpolation [here](https://github.com/drcmda/react-spring/blob/master/API-OVERVIEW.md#native-rendering-and-interpolation-demo).\n\n# Links üîó\n\n#### [Examples and Codesandboxes](https://github.com/drcmda/react-spring/blob/master/examples)\n\nClick for a combined example repository you can install as well as a collection of code-sandboxes to toy around with online.\n\n#### [API Overview](https://github.com/drcmda/react-spring/blob/master/API-OVERVIEW.md)\n\nIf you ever plan to use this library, this should be a must-read. It will go a little deeper into the primitives and how \"native\" rendering can make a large performance impact (for the better of course).\n\n#### [Full API reference](https://github.com/drcmda/react-spring/blob/master/API.md)\n\nFor annotated prop-types, good for finding out about all the obscure props that i don't want to bore you with (but which might come in handy, you never know).\n\n[Changelog](https://github.com/drcmda/react-spring/blob/master/CHANGELOG.md) | [LICENSE](https://github.com/drcmda/react-spring/blob/master/LICENSE)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/drcmda/react-spring.git"
  },
  "scripts": {
    "build": "rollup -c",
    "prebuild": "rimraf dist",
    "precommit": "lint-staged",
    "prepare": "npm run build",
    "test": "echo will do"
  },
  "sideEffects": false,
  "typings": "index.d.ts",
  "version": "4.2.0"
}
